@page "/"
@inject RewardChestService RewardChestService
@inject BarrowsBrotherService BarrowsBrotherService
@inject RewardItemDefinitionService RewardItemDefinitonService

<div class="main">


    <div class="main-container">
        <!-- Edit form for player settings that affects the chest loot -->

        <EditForm Context="formContext"
                  Model="settings
                      ">

            <div class="modal-body-settings">

                <p>


                    <label for="Killed-Dharok">Killed Dharok: </label>
                    <InputCheckbox id="Killed-Dharok"
                                   @bind-Value="settings.KilledDharok" />

                </p>

                <p>


                    <label for="Killed-Ahrim">Killed Ahrim: </label>
                    <InputCheckbox id="Killed-Ahrim"
                                   @bind-Value="settings.KilledAhrim" />

                </p>


                <p>


                    <label for="Killed-Karil">Killed Karil: </label>
                    <InputCheckbox id="Killed-Karil"
                                   @bind-Value="settings.KilledKaril" />

                </p>

                <p>


                    <label for="Killed-Guthan">Killed Guthan: </label>
                    <InputCheckbox id="Killed-Guthan"
                                   @bind-Value="settings.KilledGuthan" />

                </p>


                <p>


                    <label for="Killed-Verac">Killed Verac: </label>
                    <InputCheckbox id="Killed-Verac"
                                   @bind-Value="settings.KilledVerac" />

                </p>

                <p>


                    <label for="Killed-Torag">Killed Torag: </label>
                    <InputCheckbox id="Killed-Torag"
                                   @bind-Value="settings.KilledTorag" />

                </p>


                <br />

            </div>
            <div class="modal-body-settings-2">

                <p>


                    <label for="Diary">Morytania Hard Diary: </label>
                    <InputCheckbox id="Diary"
                                   @bind-Value="settings.CompletedMorytaniaHardDiary" />

                </p>

                <p>

                    <label for="TotalLevel">Sum Lvl of Crypt NPCs Killed: </label>

                    <InputNumber id="TotalLevel" class="form-control" @bind-Value="settings.SumTotalLevelOfCryptMonstersKilled" min="0" max="1000" required />

                </p>



                <br />
                <DataAnnotationsValidator />
                <ValidationSummary />


            </div>
</EditForm>

        <div class="calculated-rp">

            <p>

                <label>Calculated Reward Potential: </label>
                <span class="rp">
                @ChanceHelper.CalculateRewardPotential(settings.SumTotalLevelOfCryptMonstersKilled, BarrowsBrotherService.GetBrothersKilled(settings))
           </span>
                    </p>

        </div>

        <div class="body-container">
            <div class="barrows-chest-container">

                <ul class="barrows-loot-container">
                    @if (rewardChest.Items.Any())
                    {

                        @foreach (var item in rewardChest.Items.Values)
                        {
                            var def = RewardItemDefinitonService.FindAnyItemDefinitionInStore(item.Id);
                            @if (def != null)
                            {
                                <RewardItemComponent RewardItemDefinition="def" RewardItem="item"> </RewardItemComponent>
                            }
                        }
                    }
                    else
                    {
                        <li>
                            <div class="item-info">
                                <span class="empty-chest">Click on the chest to try your luck!</span>
                            </div>
                        </li>
                    }
                </ul>

                <div class="barrows-chest-actions-container">
                    <button class="reset-btn" @onclick="Reset" title="Reset everything"></button>
                    <button class="chest-btn" @onclick="Open" title="Open"></button>

                </div>

                <p class="x-times">
                    <!--!-->
                    <!--!--><label for="XTimes">Simulate how many times?</label>

                    <input type="number" id="XTimes" class="form-control" @bind="simulateHowManyTimes" min="1" required />

                </p>

            </div>


                <!---->


                <div class="barrows-collection-log-container">


                    <div class="barrows-collection-log-interface-container">

                        <div class="collection-log-chest-info">

                            Barrows Chests opened:
                            <span class="open-count">@collectionLog.ChestsOpenedCount</span>

                        </div>


                        <ul class="barrows-collection-log-items-container">
                            @if (collectionLog.Items.Any())
                            {

                                @foreach (var item in collectionLog.Items.Values)
                                {
                                    var def = RewardItemDefinitonService.FindAnyItemDefinitionInStore(item.Id);
                                    @if (def != null)
                                    {
                                        <RewardItemComponent RewardItemDefinition="def" RewardItem="item"> </RewardItemComponent>
                                    }
                                }


                            }
                            else
                            {
                                <li>
                                    <div class="item-info">
                                        <span class="empty-collection">Barrows equipment that you earn will show here!</span>
                                    </div>
                                </li>
                            }
                        </ul>

                    </div>



                </div>


            </div>

    </div>
</div>

@code {


    private int simulateHowManyTimes = 1;

    private PlayerSettings settings;
    private RewardChest rewardChest;
    private CollectionLog collectionLog;



    protected override void OnInitialized()
    {
        settings = new PlayerSettings();
        rewardChest = new RewardChest();
        collectionLog = new CollectionLog();
        InitializeCollectionLogItems();
    }

    protected void InitializeCollectionLogItems()
    {
        var definitions = RewardItemDefinitonService.GetAllRewardItemDefinitions();

        foreach(var def in definitions)
        {
            collectionLog.AddItem(new RewardItem() { Id = def.Id, Amount = 0 });
        }
    }

    protected void Reset()
    {
        rewardChest.Clear();
        collectionLog.Reset();
    }


    protected void Open()
    {

        rewardChest.Clear();

        for (int i = 0; i < simulateHowManyTimes; i++)
        {
            var rewardedItems = RewardChestService.SimulateBarrowsRewardChest(BarrowsBrotherService.GetBrothersKilled(settings), settings.SumTotalLevelOfCryptMonstersKilled, settings.CompletedMorytaniaHardDiary);


            foreach (var item in rewardedItems)
            {
                // we only populate the reward chest on the last simulation
                if (i == (simulateHowManyTimes - 1)) {
                    rewardChest.AddItem(item);
                }
                collectionLog.AddItem(item);
            }

            collectionLog.ChestsOpenedCount++;
        }

            }



    
}